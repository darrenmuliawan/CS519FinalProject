{"version":3,"sources":["logo.svg","App.js","reportWebVitals.js","index.js"],"names":["App","useState","numOfPeople","setNumOfPeople","roomWidth","setRoomWidth","roomLength","setRoomLength","people","setPeople","simulationBegin","setSimulationBegin","intervalId","setIntervalId","margin","width","height","useEffect","script","document","createElement","src","async","body","appendChild","renderRoom","d3","selectAll","remove","x","domain","range","y","svg","attr","append","y0","y_max","x0","x_max","style","renderPerson","personArray","i","rand_x","Math","random","rand_y","x_pos","y_pos","person","id","push","console","log","startSimulation","setInterval","new_people","max_x","max_y","x_direction_possibility","new_x_pos","floor","length","y_direction_possibility","new_y_pos","stopSimulation","clearInterval","className","TextField","label","type","InputLabelProps","shrink","value","onChange","e","parseInt","target","Button","variant","color","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.87032563.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import logo from './logo.svg';\nimport './App.css';\nimport TextField from '@material-ui/core/TextField';\nimport { useEffect, useState } from 'react';\nimport * as d3 from 'd3';\nimport { Button } from '@material-ui/core';\n\nexport const App = () => {\n  const [numOfPeople, setNumOfPeople] = useState(5);\n  const [roomWidth, setRoomWidth] = useState(80);\n  const [roomLength, setRoomLength] = useState(50);\n  const [people, setPeople] = useState([]);\n  const [simulationBegin, setSimulationBegin] = useState(false);\n  const [intervalId, setIntervalId] = useState();\n\n  const PERSON_RADIUS = 10;\n  let margin = {\n    top: 20,\n    bottom: 20,\n    right: 20,\n    left: 20\n  }\n  let width = (roomWidth * 15) - margin.left - margin.right;\n  let height = (roomLength * 15) - margin.top - margin.bottom;\n\n  useEffect(() => {\n    const script = document.createElement('script');\n    script.src = './d3-floorplan/d3.floorplan.min.js';\n    script.async = true;\n    document.body.appendChild(script);\n  }, [])\n\n  useEffect(() => {\n    renderRoom();\n  }, [roomWidth, roomLength, numOfPeople])\n\n  const renderParameterCard = () => {\n    return (\n      <div className=\"card\">\n        <p className=\"card__title\">Parameters</p>\n        <TextField\n          className=\"number-input\"\n          label=\"# of people\"\n          type=\"number\"\n          InputLabelProps={{\n            shrink: true,\n          }}\n          value={numOfPeople}\n          onChange={(e) => setNumOfPeople(parseInt(e.target.value) < 1 ? 1 : parseInt(e.target.value))}\n        />\n        <TextField\n          className=\"number-input\"\n          label=\"Bldg. Length (in Ft)\"\n          type=\"number\"\n          InputLabelProps={{\n            shrink: true,\n          }}\n          value={roomLength}\n          onChange={(e) => setRoomLength(parseInt(e.target.value) < 1 ? 1 : parseInt(e.target.value))}\n        />\n        <TextField\n          className=\"number-input\"\n          label=\"Bldg. Width (in Ft)\"\n          type=\"number\"\n          InputLabelProps={{\n            shrink: true,\n          }}\n          value={roomWidth}\n          onChange={(e) => setRoomWidth(parseInt(e.target.value) < 1 ? 1 : parseInt(e.target.value))}\n        />\n        {\n          !simulationBegin\n          ?\n          <Button variant=\"contained\" color=\"primary\" onClick={startSimulation}>Start Simulation</Button>\n          :\n          <Button variant=\"contained\" color=\"secondary\" onClick={stopSimulation}>Stop Simulation</Button>\n        }\n      </div>\n    )\n  }\n\n  const renderRoom = () => {\n    // RESET CHART\n    d3.select('#chart').selectAll('*').remove();\n\n    let x = d3.scaleLinear().domain([0, roomWidth]).range([0, width])\n    let y = d3.scaleLinear().domain([0, roomLength]).range([height, 0])\n\n    let svg = \n    d3.select('#chart')\n    .attr('width', width + margin.left + margin.right)\n    .attr('height', height + margin.left + margin.right)\n    .append('g')\n    .attr('transform', `translate(${margin.left}, ${margin.top})`)\n    .attr('id', 'chart-group')\n\n    let y0 = y(0)\n    let y_max = y(roomLength);\n    let x0 = x(0);\n    let x_max = x(roomWidth);\n    \n    // CREATE THE ROOM FLOOR PLAN\n    svg.append('line')\n    .style('stroke', '#000000')\n    .attr(\"x1\", x0)\n    .attr(\"y1\", y0)\n    .attr(\"x2\", x0)\n    .attr(\"y2\", y_max)\n\n    svg.append('line')\n    .style('stroke', '#000000')\n    .attr(\"x1\", x0)\n    .attr(\"y1\", y_max)\n    .attr(\"x2\", x_max)\n    .attr(\"y2\", y_max)\n\n    svg.append('line')\n    .style('stroke', '#000000')\n    .attr(\"x1\", x_max)\n    .attr(\"y1\", y0)\n    .attr(\"x2\", x_max)\n    .attr(\"y2\", y_max)\n\n    svg.append('line')\n    .style('stroke', '#000000')\n    .attr(\"x1\", x0)\n    .attr(\"y1\", y0)\n    .attr(\"x2\", x_max)\n    .attr(\"y2\", y0)\n\n    // RENDER LEFT ROOM\n    svg.append('line')\n    .style('stroke', '#000000')\n    .attr(\"x1\", x(0.3 * roomWidth))\n    .attr(\"y1\", x(0))\n    .attr(\"x2\", x(0.3 * roomWidth))\n    .attr(\"y2\", y(0.8 * roomLength))\n\n    svg.append('line')\n    .style('stroke', '#000000')\n    .attr(\"x1\", x(0.3 * roomWidth))\n    .attr(\"y1\", y(0.7 * roomLength))\n    .attr(\"x2\", x(0.3 * roomWidth))\n    .attr(\"y2\", y(0.4 * roomLength))\n\n    svg.append('line')\n    .style('stroke', '#000000')\n    .attr(\"x1\", x(0))\n    .attr(\"y1\", y(0.5 * roomLength))\n    .attr(\"x2\", x(0.3 * roomWidth))\n    .attr(\"y2\", y(0.5 * roomLength))\n\n    svg.append('line')\n    .style('stroke', '#000000')\n    .attr(\"x1\", x(0.3 * roomWidth))\n    .attr(\"y1\", y(0))\n    .attr(\"x2\", x(0.3 * roomWidth))\n    .attr(\"y2\", y(0.3 * roomLength))\n\n    if (svg) {\n      renderPerson(svg, x, y);\n    }\n  }\n\n  const renderPerson = (svg, x, y) => {    \n    let personArray = [];\n    for (let i = 0; i < numOfPeople; i++) {\n      let rand_x = Math.random();\n      let rand_y = Math.random();\n      let x_pos = x(rand_x * roomWidth);\n      let y_pos = y(rand_y * roomLength);\n\n      // CREATE PERSON OBJECT\n      let person = {\n        id: i,\n        x: x_pos,\n        y: y_pos\n      }\n\n      // RENDER DOT\n      svg.append('circle')\n      .attr(\"cx\", x_pos)\n      .attr(\"cy\", y_pos)\n      .attr(\"r\", PERSON_RADIUS)\n      .style(\"fill\", \"red\")\n\n      // RENDER WARNING RADIUS\n      svg.append('circle')\n      .attr(\"cx\", x_pos)\n      .attr(\"cy\", y_pos)\n      .attr(\"r\", x(6))\n      .style(\"fill\", \"red\")\n      .style(\"opacity\", 0.25)\n\n      // PUSH PERSON TO ARRAY\n      personArray.push(person);\n    }\n    setPeople(personArray);\n  }\n  console.log(people);\n\n  const startSimulation = () => {\n    setSimulationBegin(true);\n    let x = d3.scaleLinear().domain([0, roomWidth]).range([0, width])\n    let y = d3.scaleLinear().domain([0, roomLength]).range([height, 0])\n\n    let intervalId = setInterval(() => {\n      let new_people = [...people];\n      let svg = d3.select(\"#chart-group\");\n      svg.selectAll('circle').remove();\n      \n      for (let i = 0; i < numOfPeople; i++) {\n        // CREATE RANDOM STEP\n        let min_x = 0;\n        let min_y = 0;\n        let max_x = width;\n        let max_y = height;\n\n        // RANDOM X DIRECTION\n        let x_direction_possibility = []\n        if (new_people[i].x - 15 >= min_x) {\n          x_direction_possibility.push(-15);\n        }\n        if (new_people[i].x + 15 <= max_x) {\n          x_direction_possibility.push(15);\n        }\n        let new_x_pos = new_people[i].x + x_direction_possibility[Math.floor(Math.random() * x_direction_possibility.length)]\n        new_people[i].x = new_x_pos;\n\n        // RANDOM Y DIRECTION\n        let y_direction_possibility = []\n        if (new_people[i].y - 15 >= min_y) {\n          y_direction_possibility.push(-15);\n        }\n        if (new_people[i].y + 15 <= max_y) {\n          y_direction_possibility.push(15);\n        }\n        let new_y_pos = new_people[i].y + y_direction_possibility[Math.floor(Math.random() * y_direction_possibility.length)]\n        new_people[i].y = new_y_pos;\n\n        // RENDER DOT\n        svg.append('circle')\n        .attr(\"cx\", new_x_pos)\n        .attr(\"cy\", new_y_pos)\n        .attr(\"r\", PERSON_RADIUS)\n        .style(\"fill\", \"red\")\n  \n        // RENDER WARNING RADIUS\n        svg.append('circle')\n        .attr(\"cx\", new_x_pos)\n        .attr(\"cy\", new_y_pos)\n        .attr(\"r\", x(6))\n        .style(\"fill\", \"red\")\n        .style(\"opacity\", 0.25)\n      }\n      setPeople(new_people);\n    }, 500);\n    setIntervalId(intervalId);\n  }\n\n  const stopSimulation = () => {\n    setSimulationBegin(false);\n    if (intervalId) {\n      clearInterval(intervalId);\n    }\n  }\n  \n  return (\n    <div className=\"App\">\n      <div className=\"map-container\">\n        <p className=\"app-title\">COVID-19 Building Heatmap</p>\n        <svg id=\"chart\"/>\n      </div>\n      {renderParameterCard()}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}
[{"/Users/darrenmuliawan/Desktop/UIUC-MCS-DS/Scientific-Visualization/final-project/src/App.js":"1","/Users/darrenmuliawan/Desktop/UIUC-MCS-DS/Scientific-Visualization/final-project/src/reportWebVitals.js":"2","/Users/darrenmuliawan/Desktop/UIUC-MCS-DS/Scientific-Visualization/final-project/src/index.js":"3"},{"size":7669,"mtime":1607844683900,"results":"4","hashOfConfig":"5"},{"size":362,"mtime":1607802221585,"results":"6","hashOfConfig":"5"},{"size":500,"mtime":1607802221585,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"10"},"1xfxm2u",{"filePath":"11","messages":"12","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"13"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"13"},"/Users/darrenmuliawan/Desktop/UIUC-MCS-DS/Scientific-Visualization/final-project/src/App.js",["16","17","18"],"import logo from './logo.svg';\nimport './App.css';\nimport TextField from '@material-ui/core/TextField';\nimport { useEffect, useState } from 'react';\nimport * as d3 from 'd3';\nimport { Button } from '@material-ui/core';\n\nexport const App = () => {\n  const [numOfPeople, setNumOfPeople] = useState(5);\n  const [roomWidth, setRoomWidth] = useState(80);\n  const [roomLength, setRoomLength] = useState(50);\n  const [people, setPeople] = useState([]);\n  const [simulationBegin, setSimulationBegin] = useState(false);\n  const [intervalId, setIntervalId] = useState();\n\n  const PERSON_RADIUS = 10;\n  let margin = {\n    top: 20,\n    bottom: 20,\n    right: 20,\n    left: 20\n  }\n  let width = (roomWidth * 15) - margin.left - margin.right;\n  let height = (roomLength * 15) - margin.top - margin.bottom;\n\n  useEffect(() => {\n    const script = document.createElement('script');\n    script.src = './d3-floorplan/d3.floorplan.min.js';\n    script.async = true;\n    document.body.appendChild(script);\n  }, [])\n\n  useEffect(() => {\n    renderRoom();\n  }, [roomWidth, roomLength, numOfPeople])\n\n  const renderParameterCard = () => {\n    return (\n      <div className=\"card\">\n        <p className=\"card__title\">Parameters</p>\n        <TextField\n          className=\"number-input\"\n          label=\"# of people\"\n          type=\"number\"\n          InputLabelProps={{\n            shrink: true,\n          }}\n          value={numOfPeople}\n          onChange={(e) => setNumOfPeople(parseInt(e.target.value) < 1 ? 1 : parseInt(e.target.value))}\n        />\n        <TextField\n          className=\"number-input\"\n          label=\"Bldg. Length (in Ft)\"\n          type=\"number\"\n          InputLabelProps={{\n            shrink: true,\n          }}\n          value={roomLength}\n          onChange={(e) => setRoomLength(parseInt(e.target.value) < 1 ? 1 : parseInt(e.target.value))}\n        />\n        <TextField\n          className=\"number-input\"\n          label=\"Bldg. Width (in Ft)\"\n          type=\"number\"\n          InputLabelProps={{\n            shrink: true,\n          }}\n          value={roomWidth}\n          onChange={(e) => setRoomWidth(parseInt(e.target.value) < 1 ? 1 : parseInt(e.target.value))}\n        />\n        {\n          !simulationBegin\n          ?\n          <Button variant=\"contained\" color=\"primary\" onClick={startSimulation}>Start Simulation</Button>\n          :\n          <Button variant=\"contained\" color=\"secondary\" onClick={stopSimulation}>Stop Simulation</Button>\n        }\n      </div>\n    )\n  }\n\n  const renderRoom = () => {\n    // RESET CHART\n    d3.select('#chart').selectAll('*').remove();\n\n    let x = d3.scaleLinear().domain([0, roomWidth]).range([0, width])\n    let y = d3.scaleLinear().domain([0, roomLength]).range([height, 0])\n\n    let svg = \n    d3.select('#chart')\n    .attr('width', width + margin.left + margin.right)\n    .attr('height', height + margin.left + margin.right)\n    .append('g')\n    .attr('transform', `translate(${margin.left}, ${margin.top})`)\n    .attr('id', 'chart-group')\n\n    let y0 = y(0)\n    let y_max = y(roomLength);\n    let x0 = x(0);\n    let x_max = x(roomWidth);\n    \n    // CREATE THE ROOM FLOOR PLAN\n    svg.append('line')\n    .style('stroke', '#000000')\n    .attr(\"x1\", x0)\n    .attr(\"y1\", y0)\n    .attr(\"x2\", x0)\n    .attr(\"y2\", y_max)\n\n    svg.append('line')\n    .style('stroke', '#000000')\n    .attr(\"x1\", x0)\n    .attr(\"y1\", y_max)\n    .attr(\"x2\", x_max)\n    .attr(\"y2\", y_max)\n\n    svg.append('line')\n    .style('stroke', '#000000')\n    .attr(\"x1\", x_max)\n    .attr(\"y1\", y0)\n    .attr(\"x2\", x_max)\n    .attr(\"y2\", y_max)\n\n    svg.append('line')\n    .style('stroke', '#000000')\n    .attr(\"x1\", x0)\n    .attr(\"y1\", y0)\n    .attr(\"x2\", x_max)\n    .attr(\"y2\", y0)\n\n    // RENDER LEFT ROOM\n    svg.append('line')\n    .style('stroke', '#000000')\n    .attr(\"x1\", x(0.3 * roomWidth))\n    .attr(\"y1\", x(0))\n    .attr(\"x2\", x(0.3 * roomWidth))\n    .attr(\"y2\", y(0.8 * roomLength))\n\n    svg.append('line')\n    .style('stroke', '#000000')\n    .attr(\"x1\", x(0.3 * roomWidth))\n    .attr(\"y1\", y(0.7 * roomLength))\n    .attr(\"x2\", x(0.3 * roomWidth))\n    .attr(\"y2\", y(0.4 * roomLength))\n\n    svg.append('line')\n    .style('stroke', '#000000')\n    .attr(\"x1\", x(0))\n    .attr(\"y1\", y(0.5 * roomLength))\n    .attr(\"x2\", x(0.3 * roomWidth))\n    .attr(\"y2\", y(0.5 * roomLength))\n\n    svg.append('line')\n    .style('stroke', '#000000')\n    .attr(\"x1\", x(0.3 * roomWidth))\n    .attr(\"y1\", y(0))\n    .attr(\"x2\", x(0.3 * roomWidth))\n    .attr(\"y2\", y(0.3 * roomLength))\n\n    if (svg) {\n      renderPerson(svg, x, y);\n    }\n  }\n\n  const renderPerson = (svg, x, y) => {    \n    let personArray = [];\n    for (let i = 0; i < numOfPeople; i++) {\n      let rand_x = Math.random();\n      let rand_y = Math.random();\n      let x_pos = x(rand_x * roomWidth);\n      let y_pos = y(rand_y * roomLength);\n\n      // CREATE PERSON OBJECT\n      let person = {\n        id: i,\n        x: x_pos,\n        y: y_pos\n      }\n\n      // RENDER DOT\n      svg.append('circle')\n      .attr(\"cx\", x_pos)\n      .attr(\"cy\", y_pos)\n      .attr(\"r\", PERSON_RADIUS)\n      .style(\"fill\", \"red\")\n\n      // RENDER WARNING RADIUS\n      svg.append('circle')\n      .attr(\"cx\", x_pos)\n      .attr(\"cy\", y_pos)\n      .attr(\"r\", x(6))\n      .style(\"fill\", \"red\")\n      .style(\"opacity\", 0.25)\n\n      // PUSH PERSON TO ARRAY\n      personArray.push(person);\n    }\n    setPeople(personArray);\n  }\n  console.log(people);\n\n  const startSimulation = () => {\n    setSimulationBegin(true);\n    let x = d3.scaleLinear().domain([0, roomWidth]).range([0, width])\n    let y = d3.scaleLinear().domain([0, roomLength]).range([height, 0])\n\n    let intervalId = setInterval(() => {\n      let new_people = [...people];\n      let svg = d3.select(\"#chart-group\");\n      svg.selectAll('circle').remove();\n      \n      for (let i = 0; i < numOfPeople; i++) {\n        // CREATE RANDOM STEP\n        let min_x = 0;\n        let min_y = 0;\n        let max_x = width;\n        let max_y = height;\n\n        // RANDOM X DIRECTION\n        let x_direction_possibility = []\n        if (new_people[i].x - 15 >= min_x) {\n          x_direction_possibility.push(-15);\n        }\n        if (new_people[i].x + 15 <= max_x) {\n          x_direction_possibility.push(15);\n        }\n        let new_x_pos = new_people[i].x + x_direction_possibility[Math.floor(Math.random() * x_direction_possibility.length)]\n        new_people[i].x = new_x_pos;\n\n        // RANDOM Y DIRECTION\n        let y_direction_possibility = []\n        if (new_people[i].y - 15 >= min_y) {\n          y_direction_possibility.push(-15);\n        }\n        if (new_people[i].y + 15 <= max_y) {\n          y_direction_possibility.push(15);\n        }\n        let new_y_pos = new_people[i].y + y_direction_possibility[Math.floor(Math.random() * y_direction_possibility.length)]\n        new_people[i].y = new_y_pos;\n\n        // RENDER DOT\n        svg.append('circle')\n        .attr(\"cx\", new_x_pos)\n        .attr(\"cy\", new_y_pos)\n        .attr(\"r\", PERSON_RADIUS)\n        .style(\"fill\", \"red\")\n  \n        // RENDER WARNING RADIUS\n        svg.append('circle')\n        .attr(\"cx\", new_x_pos)\n        .attr(\"cy\", new_y_pos)\n        .attr(\"r\", x(6))\n        .style(\"fill\", \"red\")\n        .style(\"opacity\", 0.25)\n      }\n      setPeople(new_people);\n    }, 500);\n    setIntervalId(intervalId);\n  }\n\n  const stopSimulation = () => {\n    setSimulationBegin(false);\n    if (intervalId) {\n      clearInterval(intervalId);\n    }\n  }\n  \n  return (\n    <div className=\"App\">\n      <div className=\"map-container\">\n        <p className=\"app-title\">COVID-19 Building Heatmap</p>\n        <svg id=\"chart\"/>\n      </div>\n      {renderParameterCard()}\n    </div>\n  );\n}\n\nexport default App;\n","/Users/darrenmuliawan/Desktop/UIUC-MCS-DS/Scientific-Visualization/final-project/src/reportWebVitals.js",[],["19","20"],"/Users/darrenmuliawan/Desktop/UIUC-MCS-DS/Scientific-Visualization/final-project/src/index.js",[],{"ruleId":"21","severity":1,"message":"22","line":1,"column":8,"nodeType":"23","messageId":"24","endLine":1,"endColumn":12},{"ruleId":"25","severity":1,"message":"26","line":35,"column":6,"nodeType":"27","endLine":35,"endColumn":42,"suggestions":"28"},{"ruleId":"21","severity":1,"message":"29","line":205,"column":9,"nodeType":"23","messageId":"24","endLine":205,"endColumn":10},{"ruleId":"30","replacedBy":"31"},{"ruleId":"32","replacedBy":"33"},"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'renderRoom'. Either include it or remove the dependency array.","ArrayExpression",["34"],"'y' is assigned a value but never used.","no-native-reassign",["35"],"no-negated-in-lhs",["36"],{"desc":"37","fix":"38"},"no-global-assign","no-unsafe-negation","Update the dependencies array to be: [roomWidth, roomLength, numOfPeople, renderRoom]",{"range":"39","text":"40"},[1038,1074],"[roomWidth, roomLength, numOfPeople, renderRoom]"]